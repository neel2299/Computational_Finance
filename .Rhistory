n<-length(asset)
sim.size<-500
rt<-diff(log(asset))
rbar<-mean(rt)
s<-sd(rt)
delta_t<-1
set.seed(321)
mu_hat<-rbar+s^2/2
rt.sim<-rnorm(sim.size,mean=(mu_hat-s^2/2),sd=s)
asset.sim<-rep(NA,sim.size)
asset.sim[1]<-asset[n]*exp(rt.sim[1])
for(i in 2:sim.size){
asset.sim[i]<-asset.sim[i-1]*exp(rt.sim[i])
}
yl<-min(asset)*0.9
yh<-max(asset)*1.9
plot(ts(asset),xlim=c(0,(n+sim.size)),ylim=c(yl,yh))
lines((n+1):(n+sim.size),asset.sim,col="red",lwd=2)
##asset.sim
FTSE<-EuStockMarkets[,"FTSE"]
asset<-FTSE
n<-length(asset)
sim.size<-500
rt<-diff(log(asset))
rbar<-mean(rt)
s<-sd(rt)
delta_t<-1
set.seed(321)
mu_hat<-rbar+s^2/2
rt.sim<-rnorm(sim.size,mean=(rbar),sd=s)
asset.sim<-rep(NA,sim.size)
asset.sim[1]<-asset[n]*exp(rt.sim[1])
for(i in 2:sim.size){
asset.sim[i]<-asset.sim[i-1]*exp(rt.sim[i])
}
yl<-min(asset)*0.9
yh<-max(asset)*1.9
plot(ts(asset),xlim=c(0,(n+sim.size)),ylim=c(yl,yh))
lines((n+1):(n+sim.size),asset.sim,col="red",lwd=2)
##asset.sim
FTSE<-EuStockMarkets[,"FTSE"]
asset<-FTSE
n<-length(asset)
sim.size<-500
rt<-diff(log(asset))
rbar<-mean(rt)
s<-sd(rt)
delta_t<-1
set.seed(321)
mu_hat<-rbar+s^2/2
rt.sim<-rnorm(sim.size,mean=(rbar),sd=s)
asset.sim<-rep(NA,sim.size)
asset.sim[1]<-asset[n]*exp(rt.sim[1])
for(i in 2:sim.size){
asset.sim[i]<-asset.sim[i-1]*exp(rt.sim[i])
}
yl<-min(asset)*0.9
yh<-max(asset)*1.9
plot(ts(asset),xlim=c(0,(n+sim.size)),ylim=c(yl,yh))
lines((n+1):(n+sim.size),asset.sim,col="red",lwd=2)
##asset.sim
reticulate::repl_python()
rt.plot.hist(bins = 60)
library(tseries)
library(zoo)
library(reticulate)
install.packages(reticulate)
install.packages("reticulate")
library(tseries)
library(zoo)
library(reticulate)
FTSE<-EuStockMarkets[,"FTSE"]
asset<-FTSE
n<-length(asset)
sim.size<-500
rt<-diff(log(asset))
rbar<-mean(rt)
s<-sd(rt)
delta_t<-1
set.seed(321)
mu_hat<-rbar+s^2/2
rt.sim<-rnorm(sim.size,mean=(rbar),sd=s)
asset.sim<-rep(NA,sim.size)
asset.sim[1]<-asset[n]*exp(rt.sim[1])
for(i in 2:sim.size){
asset.sim[i]<-asset.sim[i-1]*exp(rt.sim[i])
}
yl<-min(asset)*0.9
yh<-max(asset)*1.9
plot(ts(asset),xlim=c(0,(n+sim.size)),ylim=c(yl,yh))
lines((n+1):(n+sim.size),asset.sim,col="red",lwd=2)
##asset.sim
reticulate::repl_python()
rt.plot.hist(bins = 60)
reticulate::repl_python()
rt.plot.hist(bins = 60)
reticulate::repl_python()
rt.plot.hist(bins = 60)
library(tseries)
library(zoo)
library(reticulate)
FTSE<-EuStockMarkets[,"FTSE"]
asset<-FTSE
n<-length(asset)
sim.size<-500
rt<-diff(log(asset))
rbar<-mean(rt)
s<-sd(rt)
delta_t<-1
set.seed(321)
mu_hat<-rbar+s^2/2
rt.sim<-rnorm(sim.size,mean=(rbar),sd=s)
asset.sim<-rep(NA,sim.size)
asset.sim[1]<-asset[n]*exp(rt.sim[1])
for(i in 2:sim.size){
asset.sim[i]<-asset.sim[i-1]*exp(rt.sim[i])
}
yl<-min(asset)*0.9
yh<-max(asset)*1.9
plot(ts(asset),xlim=c(0,(n+sim.size)),ylim=c(yl,yh))
lines((n+1):(n+sim.size),asset.sim,col="red",lwd=2)
##asset.sim
reticulate::repl_python()
rt.plot.hist(bins = 60)
Y
reticulate::repl_python()
RT.plot.hist(bins = 60)
plt.show()
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
quit
RT<-data.frame(Y=as.matrix(rt), date=time(rt))
reticulate::repl_python()
RT.plot.hist(bins = 60)
plt.show()
quit
FTSE<-EuStockMarkets[,"FTSE"]
asset<-FTSE
n<-length(asset)
sim.size<-500
rt<-diff(log(asset))
rbar<-mean(rt)
s<-sd(rt)
delta_t<-1
set.seed(321)
mu_hat<-rbar+s^2/2
rt.sim<-rnorm(sim.size,mean=(rbar),sd=s)
asset.sim<-rep(NA,sim.size)
asset.sim[1]<-asset[n]*exp(rt.sim[1])
for(i in 2:sim.size){
asset.sim[i]<-asset.sim[i-1]*exp(rt.sim[i])
}
yl<-min(asset)*0.9
yh<-max(asset)*1.9
plot(ts(asset),xlim=c(0,(n+sim.size)),ylim=c(yl,yh))
lines((n+1):(n+sim.size),asset.sim,col="magenta",lwd=2)
##asset.sim
plot(ts(rt))
FTSE<-EuStockMarkets[,"FTSE"]
asset<-FTSE
n<-length(asset)
sim.size<-500
rt<-diff(log(asset))
rbar<-mean(rt)
s<-sd(rt)
delta_t<-1
set.seed(321)
mu_hat<-rbar+s^2/2
rt.sim<-rnorm(sim.size,mean=(rbar),sd=s)
asset.sim<-rep(NA,sim.size)
asset.sim[1]<-asset[n]*exp(rt.sim[1])
for(i in 2:sim.size){
asset.sim[i]<-asset.sim[i-1]*exp(rt.sim[i])
}
yl<-min(asset)*0.9
yh<-max(asset)*1.9
plot(ts(asset),xlim=c(0,(n+sim.size)),ylim=c(yl,yh))
lines((n+1):(n+sim.size),asset.sim,col="magenta",lwd=2)
##asset.sim
plot(ts(rt))
hist(rt)
hist(rt,breaks = 6)
hist(rt,)
hist(rt,breaks=1)
hist(rt,breaks=3)
hist(rt,breaks=5)
hist(rt,breaks=c(-0.02,-0.015,-0.01,-0.005,0.00,0.005,0.01,0.015,0.02))
hist(rt,breaks=c(-0.02,-0.015,-0.01,-0.005,0.00))
hist(rt,breaks=c(0.005,0.01,0.015,0.02))
hist(rt,breaks=c(-2,-0.02,-0.015,-0.01,-0.005,0.00,0.005,0.01,0.015,0.02))
hist(rt,breaks=c(-100,-0.02,-0.015,-0.01,-0.005,0.00,0.005,0.01,0.015,0.02))
hist(rt,breaks=c(-10000,-0.02,-0.015,-0.01,-0.005,0.00,0.005,0.01,0.015,0.02))
hist(rt,breaks=c(-100000000,-0.02,-0.015,-0.01,-0.005,0.00,0.005,0.01,0.015,0.02))
hist(rt,breaks=c(-100000000,-0.02,-0.015,-0.01,-0.005,0.00,0.005,0.01,0.015,0.02,100000))
hist(rt,breaks=c(-100,-0.02,-0.015,-0.01,-0.005,0.00,0.005,0.01,0.015,0.02,100))
hist(rt,breaks=seq(-80,80,l=6))
hist(rt,breaks=seq(-80,80,l=0.005))
hist(rt,breaks=seq(-10,10,l=0.005))
hist(rt,breaks=seq(-10,10,l=0.05))
hist(rt,breaks=seq(-10,10.05,l=0.05))
hist(rt,breaks=seq(-10,10,l=1))
hist(rt,breaks=seq(-80,80,l=6))
hist(rt,breaks=seq(-80,80,l=2))
hist(rt,breaks=seq(-80,80,l=1000))
hist(rt,breaks=seq(-80,80,l=10))
#hist(rt,breaks=seq(-80,80,l=10))
seq(0,10,l=3)
#hist(rt,breaks=seq(-80,80,l=10))
seq(0,10,l=100)
hist(rt,breaks=seq(-80,80,l=100))
hist(rt,breaks=seq(-80,80,l=100000))
hist(rt,breaks=seq(-80,80,l=1000000))
d <- density(rt)
plot(d)
sigma2<-cov(r)
ind_val<-EuStockMarkets
r<-diff(log(ind_val))*100
port_lim<-10000
set.seed(1)
sigma<-mu<-rep(NA,port_lim)
for(i in 1:port_lim){
w<-sample(1:1000, 4, replace=TRUE)
w<-w/sum(w)
rp<-r%*%w
mu[i]=mean(rp)
sigma[i]<-sd(rp)
}
plot(sigma,mu)
library(corrplot)
sigma2<-cov(r)
sigma2
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
sigma2<-cov(r)
library(tseries)
er<-seq(0.45,0.75,0.001)
frontier<-matrix(NA,nrow=length(er),ncol=2)
for (i in 1:length(er)){
port_opt<-portfolio.optim(r, pm=er[i],covmat=sigma2)#calculates st no other pf has the same mean and a lower volatility.
frontier[i,]<-c(port_opt$ps,port_opt$pm)
}
sigma2<-cov(r)
library(tseries)
er<-seq(0.45,0.75,0.001)
frontier<-matrix(NA,nrow=length(er),ncol=2)
for (i in 1:length(er)){
port_opt<-portfolio.optim(r, pm=er[i],covmat=sigma2, rf=3/252)#calculates st no other pf has the same mean and a lower volatility.
frontier[i,]<-c(port_opt$ps,port_opt$pm)
}
pm
er
sigma2
library(corrplot)
sigma2<-cov(r)
sigma2
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
sigma2
#sigma2<-cov(r)
library(tseries)
er<-seq(0.45,0.75,0.001)
frontier<-matrix(NA,nrow=length(er),ncol=2)
for (i in 1:length(er)){
port_opt<-portfolio.optim(r, pm=er[i],covmat=sigma2)#calculates st no other pf has the same mean and a lower volatility.
frontier[i,]<-c(port_opt$ps,port_opt$pm)
}
r
ind_val<-as.matrix(EuStockMarkets)
r<-diff(log(ind_val))*100
port_lim<-10000
set.seed(1)
sigma<-mu<-rep(NA,port_lim)
for(i in 1:port_lim){
w<-sample(1:1000, 4, replace=TRUE)
w<-w/sum(w)
rp<-r%*%w
mu[i]=mean(rp)
sigma[i]<-sd(rp)
}
plot(sigma,mu)
library(corrplot)
sigma2<-cov(r)
sigma2
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
#sigma2<-cov(r)
library(tseries)
er<-seq(0.45,0.75,0.001)
frontier<-matrix(NA,nrow=length(er),ncol=2)
for (i in 1:length(er)){
port_opt<-portfolio.optim(r, pm=er[i],covmat=sigma2)#calculates st no other pf has the same mean and a lower volatility.
frontier[i,]<-c(port_opt$ps,port_opt$pm)
}
#sigma2<-cov(r)
library(tseries)
er<-seq(0.45,0.75,0.001)
frontier<-matrix(NA,nrow=length(er),ncol=2)
for (i in 1:length(er)){
port_opt<-portfolio.optim(as.matrix(r), pm=er[i],covmat=sigma2)#calculates st no other pf has the same mean and a lower volatility.
frontier[i,]<-c(port_opt$ps,port_opt$pm)
}
ind_val<-as.matrix(EuStockMarkets)
r<-diff(log(ind_val))*100
port_lim<-10000
set.seed(1)
sigma<-mu<-rep(NA,port_lim)
for(i in 1:port_lim){
w<-sample(1:1000, 4, replace=TRUE)
w<-w/sum(w)
rp<-r%*%w
mu[i]=mean(rp)
sigma[i]<-sd(rp)
}
plot(sigma,mu)
library(corrplot)
sigma2<-cov(r)
sigma2
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
#sigma2<-cov(r)
library(tseries)
er<-seq(0.45,0.75,0.001)
frontier<-matrix(NA,nrow=length(er),ncol=2)
for (i in 1:length(er)){
port_opt<-portfolio.optim(r, pm=er[i],covmat=sigma2)#calculates st no other pf has the same mean and a lower volatility.
frontier[i,]<-c(port_opt$ps,port_opt$pm)
}
sigma<-cov(r)
library(tseries)
er<-seq(0.45,0.75,0.001)
frontier<-matrix(NA,nrow=length(er),ncol=2)
for (i in 1:length(er)){
port_opt<-portfolio.optim(r, pm=er[i],covmat=sigma)#calculates st no other pf has the same mean and a lower volatility.
frontier[i,]<-c(port_opt$ps,port_opt$pm)
}
sigma<-cov(r)
library(tseries)
er<-seq(0.45,0.75,0.001)
frontier<-matrix(NA,nrow=length(er),ncol=2)
for (i in 1:length(er)){
port_opt<-portfolio.optim(r, pm=er[i])#calculates st no other pf has the same mean and a lower volatility.
frontier[i,]<-c(port_opt$ps,port_opt$pm)
}
ind_val<-as.matrix(EuStockMarkets)
r<-diff(log(ind_val))*100
port_lim<-10000
set.seed(1)
sigma<-mu<-rep(NA,port_lim)
for(i in 1:port_lim){
w<-sample(1:1000, 4, replace=TRUE)
w<-w/sum(w)
rp<-r%*%w
mu[i]=mean(rp)
sigma[i]<-sd(rp)
}
plot(sigma,mu)
library(corrplot)
sigma2<-cov(r)
sigma2
sigma2
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
library(corrplot)
sigma2<-cov(EuStockMarkets)
sigma2
sigma2
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
library(corrplot)
sigma2<-cov(as.matrix(EuStockMarkets))
sigma2
sigma2
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
data("mtcars")
my_data <- mtcars[, c(1,3,4,5,6,7)]
data("mtcars")
my_data <- mtcars[, c(1,3,4,5,6,7)]
my_data
data("mtcars")
my_data <- mtcars[, c(1,3,4,5,6,7)]
mtcars
data("mtcars")
my_data <- mtcars[, c(1,3,4,5,6,7)]
mtcars
cor(mtcars)
library(corrplot)
sigma2<-cov(r)
EuStockMarkets
sigma2
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
library(corrplot)
sigma2<-cov(r)
data<-EuStockMarkets[,c(2,3,4,5)]
library(corrplot)
sigma2<-cov(r)
EuStockMarkets
library(corrplot)
sigma2<-cov(r)
EuStockMarkets
data<-EuStockMarkets[,c(2,3,4)]
sigma3<-cov(data)
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
library(corrplot)
sigma2<-cov(r)
data<-EuStockMarkets[,c(2,3,4)]
sigma3<-cov(data)
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
library(corrplot)
sigma2<-cov(r)
data<-EuStockMarkets[,c(2,3,4)]
sigma3<-cov(data)
sigma3
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
library(corrplot)
sigma2<-cov(r)
head(EuStockMarkets)
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
data("mtcars")
my_data <- mtcars[, c(1,3,4,5,6,7)]
data<-as.data.frame.matrix(EuStockMarkets)
data("mtcars")
my_data <- mtcars[, c(1,3,4,5,6,7)]
data<-as.data.frame.matrix(EuStockMarkets)
data
data("mtcars")
my_data <- mtcars[, c(1,3,4,5,6,7)]
data<-as.data.frame.matrix(EuStockMarkets)
data
cov(data)
library(corrplot)
sigma2<-cor(r)
sigma2
head(EuStockMarkets)
x<-which(sigma2 == max(sigma2), arr.ind = TRUE)
x=sigma2[3,3]
sigma2<-as.vector(sigma2)
x
sigma2<-sigma2/x
sigma2<-matrix(sigma2,nrow=4)
corrplot(sigma2)
data<-as.data.frame.matrix(EuStockMarkets)
data
cov(data)
data<-as.data.frame.matrix(EuStockMarkets)
data
